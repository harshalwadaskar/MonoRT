#!/usr/bin/env perl

my $interpreter = shift;
my $test = shift;
my $disabled_tests = shift;
my $output = $test;
my $stdout = $test.'.stdout';
my $stderr = $test.'.stderr';

$output =~ s/\.exe$/.output/;

$| = 0;
#print "Interpreter: $interpreter!\n";
#print "Version: ";
#exec("$interpreter --version");
#print "\n";
print "Testing $test... ";

foreach $disabled (split (/ /, $disabled_tests)) {
	if ($disabled eq $test) {
		print "disabled.\n";
		exit (0);
	}
}
#$counter=0;

#print "argument[0] " , @ARGV[0], "\n" if defined $ARGV[0];

#while(@ARGV){
#    print "argument[$counter] " , shift, "\n";
#    $counter++
#    };

my $res;
my $cpid = fork ();
my $runSilent = !$ENV{'SILENT_TESTS'};
if (!defined ($cpid)) {
	$res = system("$interpreter @ARGV $test 2>$stderr 1>$stdout");
} elsif ($cpid == 0) {
	exec ("$interpreter @ARGV $test 2>$stderr 1>$stdout") || die "Cannot exec: $!";
} else {
	# in the parent, setup the alarm
	# test must complete in 2 minutes or it is considered buggy
	my $timeout = 2*60;
	alarm ($timeout);
	$SIG{ALRM} = sub {
		print "failed after $timeout seconds timeout.\n";
		# process group kill
		kill (-9, $cpid);
		exit (3);
	};
	$res = wait ();
	$SIG{ALRM} = sub {};
	$res = $? >> 8;
}
if ($runSilent)
{
	print "\n".read_file($stdout)."\n";
}
if ($res) {
	printf ("failed $? (%d) signal (%d).\n", $? >> 8, $? & 127);
	if ($runSilent)
	{	
		print read_file($stderr)."\n";
	}
	if (($? & 127) == 2) {
		exit (2);
	} else {
		exit (1);
	}
}
if (-f $output && (read_file ($output) ne read_file ($stdout))) {
    	print "failed output.\n";
	exit (1);
}

print "pass.\n";
unlink ($stderr);
exit (0);

sub read_file {
	local ($/);
	my $out = shift;
	open (F, "<$out") || die $!;
	$out = <F>;
	close(F);
	return $out;
}
